const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const nodemailer = require('nodemailer');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const EMAIL_FROM = process.env.EMAIL_LOGIN;
const EMAIL_PASS = process.env.EMAIL_PASSWORD;
const SMTP_HOST = process.env.SMTP_HOST;
const JWT_SECRET = process.env.JWT_SECRET;

if (!EMAIL_FROM || !EMAIL_PASS || !SMTP_HOST || !JWT_SECRET || !process.env.DATABASE_URL) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const transporter = nodemailer.createTransport({
  host: SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT, 10),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: EMAIL_FROM,
    pass: EMAIL_PASS
  }
});

pool.connect(err => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok' });
});

app.post('/api/consultation', async (req, res) => {
  const { name, phone, email, date, time, contactMethod, messenger, comment } = req.body;

  if (!name || !phone || !email) {
    return res.status(400).json({ error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
  }

  try {
    await pool.query(
      'INSERT INTO consultations (name, phone, email, date, time, contact_method, messenger, comment) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)',
      [name, phone, email, date, time, contactMethod, messenger, comment]
    );
    res.json({ message: '–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/send-email-code', async (req, res) => {
  const { email } = req.body;
  const code = Math.floor(100000 + Math.random() * 900000).toString();

  try {
    const existing = await pool.query(`SELECT * FROM email_codes WHERE email = $1 AND expires_at > NOW()`, [email]);
    if (existing.rowCount > 0) {
      return res.status(429).json({ error: '–ö–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ' });
    }

    await pool.query(`
      INSERT INTO email_codes (email, code, expires_at)
      VALUES ($1, $2, NOW() + interval '5 minutes')
    `, [email, code]);

    await transporter.sendMail({
      from: `Stlogy <${EMAIL_FROM}>`,
      to: email,
      subject: '–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞',
      text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`
    });

    console.log(`üìß –ö–æ–¥ ${code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    res.json({ message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞' });
  }
});

app.post('/api/verify-email-code', async (req, res) => {
  const { email, code } = req.body;

  try {
    const result = await pool.query(`
      SELECT * FROM email_codes
      WHERE email = $1 AND code = $2 AND expires_at > NOW()
    `, [email, code]);

    if (result.rowCount === 0) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' });
    }

    await pool.query('DELETE FROM email_codes WHERE email = $1 AND code = $2', [email, code]);

    let user = (await pool.query('SELECT id, role, is_blocked FROM users WHERE email = $1', [email])).rows[0];
    if (!user) {
      await pool.query(`
        INSERT INTO users (email, role, last_login, registration_date)
        VALUES ($1, 'user', NOW(), NOW())
      `, [email]);
      user = (await pool.query('SELECT id, role, is_blocked FROM users WHERE email = $1', [email])).rows[0];
    } else {
      await pool.query(`UPDATE users SET last_login = NOW() WHERE email = $1`, [email]);
    }

    if (user.is_blocked) {
      return res.status(403).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    }

    const token = jwt.sign({ id: user.id, email, role: user.role }, JWT_SECRET, { expiresIn: '2h' });

    res.json({ success: true, token, role: user.role });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

function authMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded; // —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω req.user.id, req.user.email, req.user.role
    next();
  } catch (err) {
    return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}

app.get('/api/me', authMiddleware, async (req, res) => {
  try {
    const result = await pool.query('SELECT id, email, role, last_login FROM users WHERE id = $1', [req.user.id]);
    if (result.rowCount === 0) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    res.json(result.rows[0]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  pool.query('DELETE FROM email_codes WHERE expires_at < NOW()')
    .then(() => console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–¥–æ–≤:', err));
}, 5 * 60 * 1000); 